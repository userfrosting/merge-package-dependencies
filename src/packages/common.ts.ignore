import extend from "just-extend";

let nextId = 0;

export abstract class Package<TPackageLiteral extends IPackageLiteral> {
    /**
     * Unique number to identify package instance.
     */
    readonly #id: number;

    readonly #pkg: TPackageLiteral;

    constructor(pkg: TPackageLiteral) {
        this.#id = nextId++;

        // Deeply clone package literal object to avoid mutation leak issues
        this.#pkg = extend({}, pkg);
    }

    /**
     * Returns a unique id for this package instance.
     * This is intended as a fallback for logging when no other identifier exists.
     */
    protected get id(): number {
        return this.#id;
    }

    /**
     * Merges package dependency matrixes from the provided package into this package.
     * @param pkg Package to take dependencies from.
     */
    public abstract merge(pkg: this): void;
}

export interface IDependencies {
    [x: string]: string;
}

/**
 * Core generic interface for all supported package types.
 * This models the
 */
export interface IPackageLiteral {
    /**
     * Package name.
     */
    name?: string;

    /**
     * Dependencies installed in all environments and by packages including this package.
     */
    dependencies?: IDependencies;

    /**
     * Dependencies intended to be used for development purposes such as build tools.
     */
    devDependencies?: IDependencies;

    /**
     * Dependencies the package is compatible with and may use if available.
     */
    peerDependencies?: IDependencies;

    /**
     * Dependencies install in all compatible environments and by packages including this package.
     */
    optionalDependencies?: IDependencies;
}
